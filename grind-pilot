#!/usr/bin/php
<?php
function parse($inFile) {
  $in = @fopen($inFile === '-' ? 'php://stdin' : $inFile, 'rb');
  if (!$in) {
    throw new Exception('Could not open '.$inFile.' for reading.');
  }
  // Read information into memory
  while ($line = fgets($in)) {
    if (substr($line, 0, 3) === 'fl=') {
      // Found invocation of function. Read functionname
      list($function) = fscanf($in, "fn=%[^\n\r]s");
      $filename = substr(trim($line), 3);
      // Special case for ENTRY_POINT - it contains summary header
      if ('{main}' === $function) {
        fgets($in);
        $headers[] = fgets($in);
        fgets($in);
      }
      // Cost line
      list($line_no, $time) = fscanf($in, "%d %d");
      handle_def($function, $filename, $line_no, $time);
    } elseif (substr($line, 0, 4) === 'cfn=') {
      // TODO: cfl= "call file"
      // Found call to function. ($function should contain function call originates from)
      $function = substr(trim($line), 4);
      // Skip call line
      fgets($in);
      // Cost line
      list($line_no, $time) = fscanf($in, "%d %d");
      handle_call($function, $line_no, $time);
    } elseif (strpos($line, ': ') !== false) {
      handle_header($line);
    }
  }
}

$buffer = array();
function pop_from_buffer($function) {
  global $buffer;
  foreach ($buffer as $index => $def) {
    if ($def['function'] === $function) { // 0 => $function
      unset($buffer[$index]);
      $buffer = array_merge(array(), $buffer);
      return $def;
    }
  }
}

function handle_def($function, $filename, $line_no, $time) {
  global $buffer;
  $buffer[] = array(
    'function' => $function,
    'filename' => $filename,
    'line_no' => $line_no,
    'time_self' => $time,
    'time_inclusive' => $time,
    'children' => array());
}

function handle_call($function, $line_no, $time) {
  global $buffer;
  $def = pop_from_buffer($function);
  $current = count($buffer) - 1;
  $def['called_from'] = $buffer[$current]['filename'];
  $buffer[$current]['time_inclusive'] += $def['time_inclusive'];
  $buffer[$current]['children'][] = $def;
}

function handle_header($header) {}

$callees = array();
function find_callees($root, $target, $path = '') {
  global $callees;
  $id = 0;
  foreach ($root['children'] as $child) {
    if ($child['function'] === $target) {
      $root['path'] = $path;
      $callees[] = $root;
    }
    find_callees($child, $target, $path . ' '. $id);
    ++$id;
  }
}

function print_calles($root, $target) {
  global $callees;
  echo "Sum       Avg.      Callees for [$target]\n";
  find_callees($root, $target);
  foreach ($callees as $data) {
    echo format_line($data, ""), "\n";
    echo "                    ", "path: ", $data['path'], "\n";
  }
}

$summary = array();
function summarise($root) {
  global $summary;
  $function = $root['function'];
  if (isset($summary[$function])) {
    $summary[$function]['count']++;
    $summary[$function]['sum'] += $root['time_self'];
  } else {
    $summary[$function]['function'] = $function;
    $summary[$function]['count'] = 1;
    $summary[$function]['sum'] = (float) $root['time_self'];
  }
  foreach ($root['children'] as $child) {
    summarise($child);
  }
}

function finalise_summary() {
  global $summary;
  foreach (array_keys($summary) as $name) {
    $summary[$name]['avg'] = $summary[$name]['sum'] / $summary[$name]['count'];
  }
}

function compare_by_avg($a, $b) {
  if ($a['avg'] == $b['avg']) {
    return 0;
  }
  return ($a['avg'] < $b['avg']) ? -1 : 1;
}

function compare_by_sum($a, $b) {
  if ($a['sum'] == $b['sum']) {
    return 0;
  }
  return ($a['sum'] < $b['sum']) ? -1 : 1;
}

function list_summary($root, $sort_by = 'avg') {
  global $summary;
  summarise($root);
  finalise_summary();
  usort($summary, "compare_by_" . $sort_by);
  $summary = array_reverse($summary, true);
  echo "Sum       Avg.      Calls Function\n";
  foreach (array_slice($summary, 0, 25) as $data) {
    echo str_pad(number_format($data['sum'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT) . " "
      . str_pad(number_format($data['avg'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT) . " "
      . str_pad($data['count'], 5, ' ', STR_PAD_LEFT) . " "
      . $data['function'] . "\n";
  }
}

$show_filename = false;
function format_line($data, $level) {
  global $show_filename;
  $s = str_pad(number_format($data['time_inclusive'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . " " . str_pad(number_format($data['time_self'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . $level
    . " " . $data['function'];
  if ($show_filename && isset($data['called_from'])) {
    $s .= "\n" . $level . "                    called from ["
      . $data['called_from'] . ":" . $data['line_no'] . "]";
  }
  return $s;
}

function format_line_short($data, $index, $level) {
  return
    str_pad(number_format($data['time_inclusive'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . " " . str_pad(number_format($data['time_self'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . $level
    . str_pad($index . ".", 5, ' ', STR_PAD_LEFT)
    . " " . $data['function'];
}

function find_slowest_path($root, $path = array()) {
    $time = 0;
    $index = 0;

    if (empty($root['children'])) {
        return $path;
    }

    foreach ($root['children'] as $i => $child) {
        if ($child['time_inclusive'] > $time) {
            $time = $child['time_inclusive'];
            $index = $i;
        }
    }

    $path[] = $index;
    return find_slowest_path($root['children'][$index], $path);
}

function traverse_and_print($root, $path) {
  global $show_filename;
  echo "Inclusive Self      Callstack\n";

  $level = "";
  foreach ($path as $index) {
    echo format_line($root, $level), "\n";
    if (!isset($root['children'][$index])) {
      throw new Exception("No such index '$index'");
    }
    $root = $root['children'][$index];
    $level .= "  ";
  }

  echo format_line($root, $level), "\n";

  if (isset($root['children'])) {
    echo "--------------------------------------------------\n";
    if (empty($root['children'])) {
        echo ' No children found.', "\n";
    } else if ($show_filename) {
      echo "[", $root['filename'], ":", $root['children'][0]['line_no'], "]\n";
    }
    foreach ($root['children'] as $index => $child) {
      echo format_line_short($child, $index, $level), "\n";
    }
  }
}

// main:
$arguments = array();
foreach (array_slice($_SERVER['argv'], 1) as $arg) {
  if (preg_match('/^--(.+)/', $arg)) {
    if ($arg === '--help') {
      echo "USAGE: grind-pilot COMMAND [OPTIONS] FILENAME [FUNCTION|PATH]\n";
      echo "  FILENAME  Name of cachegrind file. Use - for stdin.\n";
      echo "  PATH      Zero or more numbers, separated by spaces. Only valid for COMMAND=trace.\n";
      echo "  FUNCTION  Name of function. Only valid for COMMAND=callee.\n";
      echo "COMMAND:\n";
      echo "  trace     Show callstack. Use PATH to navigate.\n";
      echo "  avg       Show index of 25 most expensive files, on average.\n";
      echo "  sum       Show index of 25 most expensive files, in total.\n";
      echo "  callee    Show callees for a function.\n";
      echo "OPTIONS:\n";
      echo "  --help        Show this text.\n";
      echo "  --filename    Display filename/lineno in callstack.\n";
      exit;
    } elseif (in_array($arg, array('--show-filename', '--filename'))) {
      $show_filename = true;
    }
  } else {
    $arguments[] = $arg;
  }
}
if (empty($arguments[0])) {
  throw new Exception("Missing command");
}
$command = array_shift($arguments);
if (!in_array($command, array('trace', 'sum', 'avg', 'callee'))) {
  throw new Exception("Unknown command $command");
}
if (empty($arguments[0])) {
  throw new Exception("Missing filename");
}
$filename = array_shift($arguments);

parse($filename);
$root = $buffer[0];

if (in_array($command, array('sum', 'avg'))) {
  list_summary($root, $command);
} elseif ($command === 'trace') {
  $path = $arguments;
  if ($path[0] == 'auto') {
    $path = find_slowest_path($root);
  }
  traverse_and_print($root, $path);
} elseif ($command === 'callee') {
  print_calles($root, $arguments[0]);
}

